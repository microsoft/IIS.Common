parameters:
  agentPoolName: ''
  agentPoolDemandTeam: ''
  solution: '**\*.sln'
  restoreSolution: ''
  buildConfiguration: 'Release'
  productMajor: ''
  productMinor: ''
  buildMajor: ''
  buildMinor: ''
  signType: 'test'
  signingIdentity: 'Microsoft400'
  teamName: 'IIS'
  indexSourcesAndPublishSymbols: 'false'
  publishArtifactInstallers: 'false'
  publishArtifactSources: 'false'
  whiteListPathForAuthenticodeSign: ''
  whiteListPathForStrongNameSign: ''
  codeQLEnabled: 'true'

jobs:
- job: build

  pool:
    name: ${{ parameters.agentPoolName }}
    demands:
    - msbuild
    - visualstudio
    - ${{ if ne(parameters.agentPoolDemandTeam, '') }}:
      - Team -equals ${{ parameters.agentPoolDemandTeam }}

  variables:
    TeamName: ${{ parameters.teamName }} # required by MicroBuildTasks
    ProductMajor: ${{ parameters.productMajor }}
    ProductMinor: ${{ parameters.productMinor }}
    BuildMajor: ${{ parameters.buildMajor }}
    BuildMinor: ${{ parameters.buildMinor }}
    SignType: ${{ parameters.signType }}
    SigningIdentity: ${{ parameters.signingIdentity }}
    CodeQL.Enabled: ${{ parameters.codeQLEnabled }}

  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - ${{ if eq(parameters.publishArtifactSources, 'true') }}:
    - task: CopyFiles@2
      displayName: 'Copy Sources'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
         **
         !.git\**\*
        TargetFolder: '$(Build.ArtifactStagingDirectory)\Sources'

  - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
    displayName: 'Install Signing Plugin'
    inputs:
      signType: ${{ parameters.signType }}

  - task: NuGetToolInstaller@1
    displayName: 'Install NuGet Tool'
    inputs:
      versionSpec: '>=4.7.1'

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      command: 'restore'
      ${{ if ne( parameters.restoreSolution, '' ) }}:
        restoreSolution: ${{ parameters.restoreSolution }}
      ${{ else }}:
        restoreSolution: ${{ parameters.solution }}
      feedsToUse: config
      nugetConfigPath: NuGet.config

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0 
    displayName: 'Component Detection'

  - task: PowerShell@2
    displayName: 'Process Msbuild Arguments'
    inputs:
      targetType: inline
      script: |
       $MsbuildArgsDict =
       @{
           "PRODUCT_MAJOR" = $env:PRODUCTMAJOR;
           "PRODUCT_MINOR" = $env:PRODUCTMINOR;
           "BUILD_MAJOR" = $env:BUILDMAJOR;
           "BUILD_MINOR" = $env:BUILDMINOR;
           "SignType" = $env:SIGNTYPE;
           "SigningIdentity" = $env:SIGNINGIDENTITY;
       };
       $MsbuildArgs = ""
       foreach ($key in $MsbuildArgsDict.Keys)
       {
           if (![string]::IsNullOrEmpty($MsbuildArgsDict[$key]))
           {
               $MsbuildArgs += "/p:$($key)=$($MsbuildArgsDict[$key]) "
           }
       }
       Write-Host "$("##vso[task.setvariable variable=MsbuildArgs]") $($MsbuildArgs)"
       Write-Host "MsbuildArgs: $($MsbuildArgs)"

  - task: VSBuild@1
    displayName: 'Build x86'
    inputs:
      solution: ${{ parameters.solution }}
      vsVersion: 15.0
      msbuildArgs: $(MsbuildArgs)
      platform: x86
      configuration: ${{ parameters.buildConfiguration }}
      clean: true
      msbuildArchitecture: x64

  - task: VSBuild@1
    displayName: 'Build x64'
    inputs:
      solution: ${{ parameters.solution }}
      vsVersion: 15.0
      msbuildArgs: $(MsbuildArgs)
      platform: x64
      configuration: ${{ parameters.buildConfiguration }}
      clean: true
      msbuildArchitecture: x64

  - task: CopyFiles@2
    displayName: 'Copy Binaries x86'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\bin\${{ parameters.buildConfiguration }}\x86'
      Contents: |
       **\*.dll
       **\*.exe
      TargetFolder: '$(Build.ArtifactStagingDirectory)\Binaries\x86'

  - task: CopyFiles@2
    displayName: 'Copy Binaries x64'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\bin\${{ parameters.buildConfiguration }}\x64'
      Contents: |
       **\*.dll
       **\*.exe
      TargetFolder: '$(Build.ArtifactStagingDirectory)\Binaries\x64'
 
  - task: CopyFiles@2
    displayName: 'Copy Symbols x86'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: '**\x86\**\*.pdb'
      TargetFolder: '$(Build.ArtifactStagingDirectory)\Symbols\x86'

  - task: CopyFiles@2
    displayName: 'Copy Symbols x64'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: '**\x64\**\*pdb'
      TargetFolder: '$(Build.ArtifactStagingDirectory)\Symbols\x64'

  - ${{ if eq(parameters.publishArtifactInstallers, 'true') }}:
    - task: CopyFiles@2
      displayName: 'Copy Installers x86'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\bin\${{ parameters.buildConfiguration }}\x86'
        Contents: '**\*.msi'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\Installers\x86'

  - ${{ if eq(parameters.publishArtifactInstallers, 'true') }}:
    - task: CopyFiles@2
      displayName: 'Copy Installers x64'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\bin\${{ parameters.buildConfiguration }}\x64'
        Contents: '**\*.msi'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\Installers\x64'

  - ${{ if eq(parameters.signType, 'real') }}:
    - task: ms-vseng.MicroBuildShipTasks.7c429315-71ba-4cb3-94bb-f829c95f7915.MicroBuildCodesignVerify@2
      displayName: 'Verify Signed Binaries'
      inputs:
        TargetFolders: '$(Build.ArtifactStagingDirectory)\Binaries'
        WhiteListPathForCerts: ${{ parameters.whiteListPathForAuthenticodeSign }}
        WhiteListPathForSigs: ${{ parameters.whiteListPathForStrongNameSign }}

  - ${{ if and(eq(parameters.signType, 'real'), eq(parameters.publishArtifactInstallers, 'true')) }}:
    - task: ms-vseng.MicroBuildShipTasks.7c429315-71ba-4cb3-94bb-f829c95f7915.MicroBuildCodesignVerify@2
      displayName: 'Verify Signed Installers'
      inputs:
        TargetFolders: '$(Build.ArtifactStagingDirectory)\Installers'
        WhiteListPathForCerts: ${{ parameters.whiteListPathForAuthenticodeSign }}

  - ${{ if eq(parameters.indexSourcesAndPublishSymbols, 'true') }}:
    - task: PublishSymbols@2
      displayName: 'Enable Source Server'
      inputs:
        SymbolsFolder: '$(Build.ArtifactStagingDirectory)\Symbols'
        SearchPattern: '**\*.pdb'
        SymbolServerType: TeamServices

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Binaries'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\Binaries'
      ArtifactName: Binaries

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Symbols'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\Symbols'
      ArtifactName: Symbols

  - ${{ if eq(parameters.publishArtifactInstallers, 'true') }}:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Installers'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\Installers'
        ArtifactName: Installers

  - ${{ if eq(parameters.publishArtifactSources, 'true') }}:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Sources'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\Sources'
        ArtifactName: Sources